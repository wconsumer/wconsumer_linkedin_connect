<?php
use Drupal\wconsumer\Wconsumer;
use Drupal\wconsumer\Service\Base as Service;
use Drupal\wconsumer\Service\Linkedin;



/**
* Implements hook_block_info().
*/
function wconsumer_linkedin_connect_block_info() {
  $blocks['wconsumer_linkedin_connect-login'] = array(
    'info' => t('Linkedin Connect (wconsumer)'),
  );

  return $blocks;
}

/**
* Implements hook_block_view().
*/
function wconsumer_linkedin_connect_block_view($delta = '') {
  $block = array();

  if ($delta === 'wconsumer_linkedin_connect-login' && $block = _wconsumer_linkedin_connect_block()) {
    $block = array(
      'subject' => '',
      'content' => $block,
    );
  }

  return $block;
}

/**
* Implements hook_form_FORM_ID_alter().
*/
function wconsumer_linkedin_connect_form_user_login_block_alter(&$form, &$form_state) {
  _wconsumer_linkedin_connect_user_login_form_alter($form, $form_state);
}

/**
* Implements hook_form_FORM_ID_alter().
*/
function wconsumer_linkedin_connect_form_user_login_alter(&$form, &$form_state) {
  _wconsumer_linkedin_connect_user_login_form_alter($form, $form_state);
}

function wconsumer_linkedin_connect_form_user_register_form_alter(&$form, &$form_state) {
  $default = function($field, $value = NULL) use(&$form) {
    if (func_num_args() > 1) {
      $form['account'][$field]['#default_value'] = $value;
    }
    return @$form['account'][$field]['#default_value'];
  };

  if (!$default('name') || !$default('mail')) {
    try {
      $api = _wconsumer_linkedin_connect_api();

      if (!$default('name')) {
        try {
          $user = $api->get('/user')->send()->json();

          if (!empty($user['login'])) {
            $default('name', $user['login']);
          }
        }
        catch (Exception $e) {
          // do nothing
        }
      }

      if (!$default('mail')) {
        try {
          $emails = $api->get('/user/emails')->send()->json();

          if (!empty($emails[0])) {
            $default('mail', $emails[0]);
          }
        }
        catch (Exception $e) {
          // do nothing
        }
      }
    }
    catch (Exception $e) {
      // do nothing
    }
  }
}

/**
* Implements hook_menu().
*/
function wconsumer_linkedin_connect_menu() {
  $items['wconsumer_linkedin_connect/auth'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_wconsumer_linkedin_connect_auth',
    'access callback' => TRUE,
  );

  return $items;
}

/**
* Implements hook_wconsumer_define_required_scopes().
*/
function wconsumer_linkedin_connect_wconsumer_define_required_scopes(Service $service) {
  if ($service instanceof Linkedin) {
    return array('r_basicprofile','r_fullprofile','r_emailaddress','r_network','r_contactinfo','rw_nus','rw_groups','w_messages','w_company_admin');
  }
  return null;
}

/**
* Implements hook_user_insert
*/
function wconsumer_linkedin_connect_user_insert(&$edit, $account, $category) {
  // Copy user credentials from session to user account
  $credentials = Wconsumer::$linkedin->getCredentials();
  if (isset($credentials)) {
    Wconsumer::$linkedin->setCredentials($credentials, $account->uid);
  }
}

function _wconsumer_linkedin_connect_user_login_form_alter(&$form, &$form_state) {
  // if ($block = _wconsumer_linkedin_connect_block()) {
    // $form['wconsumer_Linkedin_links'] = array(
      // '#theme' => 'item_list',
      // '#items' => array(
        // 'data' => $block,
      // ),
      // '#weight' => 1,
    // );
  // }
}

function _wconsumer_linkedin_connect_block() {
  global $user;

  if (!empty($user->uid) || !Wconsumer::$linkedin->isActive()) {
    return NULL;
  }

  return l(
    t('Connect with Linkedin'),
    sprintf('wconsumer/auth/linkedin/'),
    array('query' => array('destination' => '/wconsumer_linkedin_connect/auth'))
  );
}
function generate_password_linkedin() {
	$chars = 'abcdefghijklmnopqrstuvwxyz1234567890';
	$password = '';
	for ($i = 0; $i < 10; $i++) {
		$password .= $chars[rand(0, strlen($chars) - 1)];
	}
	return $password;
}
function _wconsumer_linkedin_connect_auth() {
  do {
    if (!empty($GLOBALS['user']->uid)) {
      drupal_goto('user');
    }

    $api = _wconsumer_linkedin_connect_api();

    $LinkedinUserData = (array)$api->get('people/~/formatted-name')->send()->xml();
    $profile_url = (array)$api->get('people/~/public-profile-url')->send()->xml();

    $uniqueUserId = @$profile_url[0];
    if (!$uniqueUserId) {
      drupal_set_message(
        t("Couldn't identify you due to incomplete Linkedin response ('html_url' field not found)"),
        'error'
      );
      break;
    }

    $user = user_external_load($uniqueUserId);
    if ($user) {
      user_login_submit(array(), $form_state = array('uid' => $user->uid));
      break;
    }

   	$login = str_replace(' ', '_', $LinkedinUserData[0]);
    if (!$login) {
      drupal_set_message(
        t('Can\'t get your Linkedin login. We need this to create a new account for you. Please use a
<a href="!url">regular register form</a>.',
          array('!url' => url('user/register'))),
        'error'
      );
      break;
    }

    $emails = (array)$api->get('people/~/email-address')->send()->xml();
    $email = @$emails[0];

    if (empty($email)) {
      drupal_set_message(
        t('Linkedin did not return your private email. We need this to register a new account for you. Please make
sure you have specified private email in your Linkedin account settings or register with a
<a href="!url">regular register form</a>.',
          array('!url' => url('user/register'))),
        'error'
      );
      break;
    }
	$password_generate = generate_password_linkedin();
    // Register user with built-in register form
	$form_state = array();
	$form_state['values']['name'] = $login;
	$form_state['values']['mail'] = $email;
	$form_state['values']['pass']['pass1'] = $password_generate;
	$form_state['values']['pass']['pass2'] = $password_generate;
	$form_state['values']['op'] = t('Create new account');
	drupal_form_submit('user_register_form', $form_state);
   
    // Find user account info
    $account = user_load_by_name($login);
	
    // Redirect user to register page on registration fail so he can choose hist username and email and try
    // to register again
    if (form_get_errors() || !$account) {
      // If username or email is taken or some other registration error occurs then there will be errors shown coming
      // from register form. We don't want to show them to user for this time b/c it would be confusing. Instead
      // we show our warning message.
      form_clear_error();
      drupal_get_messages(); // clear messages

      drupal_set_message(
        t('No linked account found. Please create a new account and next time you will be able to sign in to
it with Linkedin. If you already have an account here please sign in and link it to your Linkedin account
on My Account page.'),
        'warning'
      );

      drupal_goto('user/register');
    }

    // Assign global unique id to user
    user_set_authmaps($account, array('authname_wconsumer_linkedin_connect' => $uniqueUserId));

    // Log user in
    user_login_submit(array(), $form_state = array('uid' => $account->uid));

    // Make user happy
    drupal_set_message(t('You are now registered with your Linkedin username and email. Please check mail and verify.'));
    drupal_goto('user');

  } while (FALSE);

  drupal_goto();
}

function _wconsumer_linkedin_connect_api() {
	global $user;

	$scopes = wconsumer_linkedin_connect_wconsumer_define_required_scopes(Wconsumer::$linkedin);
	$scopes = array();
	try {
		$api = Wconsumer::$linkedin->api($user->uid, $scopes);
	}
	catch (Exception\ServiceInactive $e) {
		drupal_set_message(t('User not yet authorized access to his Linkedin service profile'), 'error');
	}
	catch (Exception\NoUserCredentials $e) {
		drupal_set_message(t('User not yet authorized access to his Linkedin service profile'), 'error');
	}
	catch (Exception\AdditionalScopesRequired $e) {
		drupal_set_message(t('User not yet authorized access to his Linkedin service profile'), 'error');
	}
	return $api;
}